AUXL Engine v0.2 : Web XR Scenario, Object Generator Engine & Universal Controller System 
---
Wiki Sections

- [Home](https://github.com/Minty-Crisp/AUXL/wiki)

- [System Overview](https://github.com/Minty-Crisp/AUXL/wiki/System-Overview)

- [Getting Started with AUXL](https://github.com/Minty-Crisp/AUXL/wiki/Getting-Started-with-AUXL)

- [Customizing AUXL Controls](https://github.com/Minty-Crisp/AUXL/wiki/Customizing-AUXL-Controls)

Building AUXL Scenarios, Zones and Scenes
- [Instructions](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Instructions)
- [Scenario](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Scenario)
- [Zone](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Zone)
- [Scene](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Scene)

Building Basic AUXL Objects
- [Core](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Core)
- [Layer](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Layer)
- [ObjsGenRing](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ObjsGenRing)
- [MultiAssetGen](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-MultiAssetGen)
- [Horizon](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Horizon)
- SkyBox (Here)
- [Teleport](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Teleport)
- [ImageSwapper](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ImageSwapper)
- [ImageCarousel](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ImageCarousel)

Building Advanced AUXL Objects
- [NPC w/ Book](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-NPC-w--Book)
- [Menu](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-Menu)
- [MemoryGame](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-MemoryGame)

Using Special AUXL Objects
- [Player](https://github.com/Minty-Crisp/AUXL/wiki/Using-Special-AUXL-Objects-:-Player)
- [HamMenu](https://github.com/Minty-Crisp/AUXL/wiki/Using-Special-AUXL-Objects-:-HamMenu)

Demo & Examples
- [Demo](https://minty-crisp.github.io/AUXL/)
- [Starter](https://minty-crisp.github.io/AUXL/starter.html)

---
Building Basic AUXL Objects : SkyBox
---
Combine various Cores of Lights, Skies and Space objects into 1 SkyBox object to encapsulate the entire scene. A default auxl.skyBox0 object will always be provided within auxl-library component to allow for advanced lighting, gradient sky and Day/Night Sun/Moon atmosphere cycles.
---
Defining a SkyBox Data & SkyBox Object :
---
A SkyBox can take in an array of Cores for each of the 3 categories it controls such as Lights, Sky and Space objects. The default data you see below utlizes A-Frame's always added directional and ambient lights (they are configured as entity: 'preAdded'), so if you despawn this object it will despawn those lights as well making the world very dark with the default sky color until a new SkyBox is added. Working around the A-Frame injection of those 2 default lights.

	//skyBox0 within auxl-library
	auxl.skyBox0Data = {
	data:'skyBox0Data',
	id:'skyBox0',
	lights:[
		auxl.directionalLight,
		auxl.directionalLight2,
		auxl.directionalLight3,
		auxl.ambientLight,
	],
	sky:[
		auxl.skyGrad,
	],
	space:[
		auxl.sunLayer,
		auxl.moonLayer,
	],
	};
	auxl.skyBox0 = auxl.SkyBox(auxl.skyBox0Data);

This default SkyBox is special in it's own way. Specifically that each of these Cores all come with Sunrise, Day time, Sunset & Night time configurations and animations to mimick a tranitioning cycle. These Cores are all predefined and stored within the same component auxl-library. The 4 light system mimicks the classic 3 point lighting photography setup used in photoshoots along with slight ambient illumination. The sky item uses the ThreeGradShader to mimick an atmosphere shades with color changing animations and finally both a Sun and Moon object that rotate within the scene's sphere radius matched with the position of a directional light each.

The day/night cycle timing defaults to 6 min 24 hour cycles, but can be adjusted via the SkyBox methods DayNightCycle and RestartDayNight with the shortest allowed time of 24 second 24 hour cycle. The cycle is only supported for this default SkyBox, but you may disable and copy the original Data to generate new Cores with the same name within auxl-scene-library and define a new SkyBox for tweaking and customizations. You must disable the original ones and create a new SkyBox to avoid conflicts and to ensure they load in the correct order. Cores must be generated before they can be loaded into an object.

You may also leave the default SkyBox as is and copy all the Data to generate new SkyBox's. When doing this, a few notes. The 2 objects directionalLight and ambientLight are connected to always injected lights for every A-Frame scene, so they must be removed or incorporated into your new SkyBox. To remove them without adding and removing the entire SkyBox, use Core methods to simply despawn them via their Core names (directionalLight & ambientLight) and then add your new SkyBox.

Each paramter description :

- data: Name of Data object for reference.

- id : Name must match named SkyBox object generated.

- lights: Array of Light objects that illuminate the entire scene.

- sky: Array of Sky objects. Does not need to be a-sky entites.

- space: Array of Space objects that will spawn as far away as possible.

A note for the sky object. While it is not ideal to have a lot of sky sphere objects to keep overall geometry optimized, you can still utilize a few Sky objects for interesting effects. More default SkyBox objects will be added in the future to showcase this, but specifically you could add a slightly smaller Sky like sphere with a png transparent texture such as stars to have the gradient background shine through the star openings. Non a-sky entities can also be rotated to enhance the day/night cycle illusion as well.

---
SkyBox Methods :
---

SpawnSkyBox
---
- Spawns the SkyBox into the environment. When spawning via a Scenario, Zone, Scene or Book it is added to that respective instruction tracker.

It does not accept any parameters.

SpawnSkyBox()

	skyBox0:{SpawnSkyBox:null},
- - -

DespawnSkyBox
---
- Despawns the SkyBox from the environment. When removing via a Scenario, Zone, Scene or Book it is also removed from that respective instruction tracker.

It does not accept any parameters.

DespawnSkyBox()

	skyBox0:{DespawnSkyBox:null},
- - -

DayNightCycle
---
- Start the Day/Night animation cycle for a SkyBox in the scene that loops through the default or provided amount of time to mimick a 24 hour cycle.

It accepts a number to determine the total day 24 hour cycle used. Defaults to 6 minutes and can't go lower than 24 seconds.

DayNightCycle(dayLength)

'dayLength' is a number in milliseconds (1000 is 1 sec), so 3600000 is 60 minutes/1 hour.

	skyBox0:{DayNightCycle:3600000},
- - -

PauseDayNight
---
- Pause the current Day/Night animation cycle for a SkyBox in the scene.

It does not accept any parameters.

PauseDayNight()

	skyBox0:{PauseDayNight:null},
- - -

ResumeDayNight
---
- Resume a paused Day/Night animation cycle for a SkyBox in the scene.

It does not accept any parameters.

ResumeDayNight()

	skyBox0:{ResumeDayNight:null},
- - -

RestartDayNight
---
- Restart from the Sunrise a new Day/Night animation cycle for a SkyBox in the scene that loops through the default or provided amount of time to mimick a 24 hour cycle.

It accepts a number to determine the total day 24 hour cycle used. Defaults to 6 minutes and can't go lower than 24 seconds.

RestartDayNight(dayLength)

'dayLength' is a number in milliseconds (1000 is 1 sec), so 24000 is 24 seconds.

	skyBox0:{RestartDayNight:24000},
- - -