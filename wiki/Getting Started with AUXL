AUXL Engine v0.2 : Web XR Scenario, Object Generator Engine & Universal Controller System 
---
Wiki Sections

- [Home](https://github.com/Minty-Crisp/AUXL/wiki)

- [System Overview](https://github.com/Minty-Crisp/AUXL/wiki/System-Overview)

- Getting Started with AUXL(Here)

- [Customizing AUXL Controls](https://github.com/Minty-Crisp/AUXL/wiki/Customizing-AUXL-Controls)

Building AUXL Scenarios, Zones and Scenes
- [Instructions](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Instructions)
- [Scenario](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Scenario)
- [Zone](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Zone)
- [Scene](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Scene)

Building Basic AUXL Objects
- [Core](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Core)
- [Layer](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Layer)
- [ObjsGenRing](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ObjsGenRing)
- [MultiAssetGen](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-MultiAssetGen)
- [Horizon](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Horizon)
- [SkyBox](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-SkyBox)
- [Teleport](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Teleport)
- [ImageSwapper](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ImageSwapper)
- [ImageCarousel](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ImageCarousel)

Building Advanced AUXL Objects
- [NPC w/ Book](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-NPC-w--Book)
- [Menu](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-Menu)
- [MemoryGame](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-MemoryGame)

Using Special AUXL Objects
- [Player](https://github.com/Minty-Crisp/AUXL/wiki/Using-Special-AUXL-Objects-:-Player)
- [HamMenu](https://github.com/Minty-Crisp/AUXL/wiki/Using-Special-AUXL-Objects-:-HamMenu)

Demo & Examples
- [Demo](https://minty-crisp.github.io/AUXL/)
- [Starter](https://minty-crisp.github.io/AUXL/starter.html)

---
Getting Started with AUXL
---
Get started building AUXL XR experiences by forking this repo and customizing these 2 files...
- starter.html
- auxl-v02.starter.js

You can use the auxl-v02.demo.js file as a larger set of references for a bigger world as it showcases all that AUXL has to offer so far, but the starter is better to help learn the system with a bare bones version. Included in the repo is an asset folder containing various important source files for prebuilt objects and you may use any of them as you like.

You may also reference the Functions, Object Generators, Data and AUXL objects located with the auxl-v02-system.js as well.
- auxl : Main System and Object Generators
- auxl-library : Main System Library of Objects

Additionally there are a handful of other components located with the System JS file that you may utilize. Some are used by the System only while others are available. Those are...
- attach : Attach an object to another object with offset.
- look-at-xyz : Configure an object to match the rotation of X, Y and/or Z of another object.
- clickfunc : Run an AUXL method via standard event hit on object.
- clickrun : Run an AUXL method via standard event hit on object.
- fusingrun : Run an AUXL method via standard event hit on object.
- mousedownrun : Run an AUXL method via standard event hit on object.
- mouseenterrun : Run an AUXL method via standard event hit on object.
- mouseleaverun : Run an AUXL method via standard event hit on object.
- mouseuprun : Run an AUXL method via standard event hit on object.
- locomotion : System use only. Handles movement.
- teleportation : System use only. Handles AUXL Teleport object logic.
- raycast-teleportation : Attach to a clickable object to teleport to intersection point on click.
- universal-controls : System use only. Handles all controls and dynamic actions. 
- threeColorGradientShader : Third party component to generate a non-textured gradient material.

Be sure that the HTML file is ready to be served on your platform. If needed remove the current index.html and rename the starter.html to index.html to serve with GitHub Pages or other services easily.

Inside of the auxl-v02.starter.js there are 2 components that you will work within.
- auxl-scene-library
- auxl-scenes

auxl-scene-library :
- Contains all of the AUXL Data and generated AUXL Objects that you build and will use inside of your Scenario, Zone, Scene and Books.

auxl-scenes :
- Contains all of the AUXL Scenario, Zone and Scene Instruction Data as well as their generated objects.

Starter Scenario :
---
A Basic overview of the Scenario structure before we follow along through each Instruction Data you find in the Starter JS file.

The Starter Scenario is setup as follows...
- Starter Scenario w/ Zone0 as the default
- - Zone 0 with Scene 0 default
- - - Scene 0
- - - Scene 1
- - Zone 1
- - - Scene 0

Here we have a single Scenario that loads up the Zone0 on load. When Zone0 is loaded on Scenario start, it will load up Scene 0. Zone 0 has an additional Scene, Scene 1. There is another Zone, Zone 1 which has 1 Scene, Scene 0.

The Map flow which is defined inside each Zone Data works as follows...
- Zone 0
- - Zone0Scene0 <-> Zone0Scene1
- - Zone0Scene0 -(LOCKED)> Zone1Scene0
- Zone 1
- - Zone1Scene0 -> Zone0Scene0

The map is configured to allow unrestricted travel between Zone0Scene0 & Zone0Scene1. To move out of Zone 0 though and into Zone1Scene0, it requires a Key as it is Locked. You will be given the needed key by a NPC inside of Zone0Scene1. Once you recieve that Key in your Inventory then you may travel from Zone0Scene0 to Zone1Scene0 without issue. And since the reverse does not have any locks configured you have nothing preventing your return. The Locked travel is configured to allow the Player to keep their key and so you may return at any time in the future as well.

Scenario Instructions :
---
Inside our Starter Scenario we accomplish a handful of things. First we configure 3 unique actions that control toggling of the Player's Walk Speed, Sitting/Standing mode and Crouch/Upright mode to Action1/5/6 Down respectively. More info on this can be found in the Controls and Player wiki page detailing which input each Action is assoicated with and break down of how to attach more.

	controls:{
		action1Down:{auxlObj: 'playerRig', component: 'locomotion', func: 'toggleSpeed'},
		action5Down:{auxlObj: 'player', component: false, func: 'ToggleCrouch'},
		action6Down:{auxlObj: 'player', component: false, func: 'ToggleSittingMode'},
	},

At the start of the Scenario we spawn in the prebuilt SkyBox named skyBox0 which supports Day/Night cycle, we show the prebuilt HamMenu named ham which can be toggled to view/hide by clicking the Player Floor, spawn a Core named Floor and spawn a Layer named clouds.

	start:{
		skyBox0:{SpawnSkyBox: null},
		ham:{SpawnHam: null},
		floor:{SpawnCore: null},
		clouds:{SpawnLayer: null},
	},

On Delay, we start our prebuilt SkyBox DayNight cycle with default 24 hour time of 6 minutes.

	delay:{
		100:{
			skyBox0:{DayNightCycle: null},
		},
	},

Zone 0 Instructions :
---
Inside our default and largest Zone, we first configure our Map of the 2 Scenes within this Zone. We configure our zone0Scene0 to connect with our zone0Scene1 without issue. Then we configure zone0Scene0 to connect the Zone 1's only scene, zone1Scene0, but only if the Player has the key named 'zone1Key' in their Inventory. And finally we configure other Scene, zone0Scene1 to connect back to zone0Scene0 without issue for a 2 way travel.

	zone0Scene0:{
		connect0: {inZone: true, node: 'zone0Scene1',},
		connect1: {inZone: 'zone1', node: 'zone1Scene0', locked: true, key: 'zone1Key', keepKey: true},
	},
	zone0Scene1:{
		connect0: {inZone: true, node: 'zone0Scene0',},
	},

At start we spawn a Core named cubeCore into the Zone which will stay spawned regardless of which Scene we are in as long as we stay in Zone 0.

	start:{
		cubeCore:{SpawnCore:null},
	},

On Delay of 15 seconds upon the Zone loading, we display a Player notification.

	delay:{
		15000:{
			player:{Notification: {message:'15 seconds'}},
		},
	},

On Interval of every 6 seconds while in the Zone, the Core cubeCore emits an event named 'swapEvent'

	interval:{
		6000: {
			run: {cubeCore:{EmitEvent: 'swapEvent'},}, loop: 'infinite'
		},
	},

In the Events we define 3 custom events. A 'swapEvent' which runs from the above 6 second interval. This event uses If/Else conditionals to check a flag on the Core cubeCore named 'testVar'. Everytime it is ran, we emit the defined event either 'customeven1' or 'customevent2' and toggle that same flag to the opposite of what it was. The 2 events that the If/Else conditionals can emit are defined right below to adjust the same Core cubeCore's material via the Core method ChangeSelf().

	event:{
		swapEvent: {
			cubeCore:{IfElse: {cubeCore:{cond: 'testVar',
			ifTrue: {
				cubeCore:{EmitEvent: 'customevent1',SetFlag:{flag: 'testVar', value: false},},
			},ifFalse: {
				cubeCore:{EmitEvent: 'customevent2',SetFlag:{flag: 'testVar', value: true},},
			},}}},
		},
		customevent1: {
			cubeCore: {ChangeSelf: {property: 'material', value: {color: '#1da356', emissive: '#1da356'}}},
		},
		customevent2: {
			cubeCore: {ChangeSelf: {property: 'material', value: {color: '#a72fe6', emissive: '#a72fe6'}}},
		},
	},

In the Interaction section we configure the standard Interaction event 'click' to emit the event 'swapEvent' just as it would automatically on 6 second interval, but when the user clicks the object toggling between the 2 color changes.

	interaction:{
		click: {
			cubeCore:{EmitEvent:'swapEvent'},
		},
	},


Zone 0 | Scene 0 Instructions :
---
And now we are at our 1st Scene. We are envisioning this Scene to be an outdoor forest like area, so using the Scenario wide Core floor object, we run the Core method ChangeSelf() to update the material with a texture, texture repeat, color and emissive color to match this object to our area. We also spawn a MutliAssetGen object called biome which uses 5 Cores that have GLTF models configured to them in each of the 5 Sized categories (Tiny, Small, Medium, Large & Huge) that are all forest in theme. We spawn a hill like Horizon with the Horizon object named hills with a nice green color variation. And finally we spawn a prebuilt Teleport object named teleport which has 8 teleport points surrounding the center point.

	start:{
		floor:{ChangeSelf:{property: 'material', value: {src: auxl.pattern49, repeat: '150 150',color: "#1e7e5d", emissive: "#1e7e5d",},}},
		biome:{SpawnMultiAsset:null},
		hills:{SpawnHorizon:null},
		teleport:{SpawnTeleport:null},
	},

Zone 0 | Scene 1 Instructions :
---
When traveling into this scene, all objects we spawned inside of Scene 0 will despawn, but any objects that we spawned in our parent Scenario and parent Zone will stay such as cubeCore. Now in this Scene, we need to fill it out and are envisioning it to be an indoor area. First we update our Scenario wide Core floor with the Core method ChangeSelf() to match our indoor style. Next we spawn a Horizon object named indoorWall which spawns 4 walls with a radius of 10 meters. We also spawn a Core named indoorCeiling to cap our walls. Then we spawn a NPC named npcKeyGiver which through interaction will provide the Player with Key zone1Key allowing travel into Zone1 from Zone0Scene0. And finally we spawn another, but different prebuilt Teleport object named teleport0 which has 4 points.

	start:{
		floor:{ChangeSelf:{property: 'material', value: {src: auxl.pattern67, repeat: '150 150',color: "#6f421a", emissive: "#6f421a",},}},
		indoorWall:{SpawnHorizon:null},
		indoorCeiling:{SpawnCore:null},
		npcKeyGiver:{SpawnNPC:null},
		teleport0:{SpawnTeleport:null},
	},

Zone 1 Instructions :
---
In our other zone, Zone 1 we do not make any Zone changes other than mapping our only Scene. Here we configure unrestricted travel back to zone0Scene0.

	zone1Scene0:{
		connect0: {inZone: 'zone0', node: 'zone0Scene0',},
	},

Zone 1 | Scene 0 Instructions :
---
When our only Scene within Zone 1 loads, all previously spawned Scene objects unspawn as well as all previously spawned Zone objects which include the Core cubeCore. We start off by changing the Scenario wide Core floor once again with the Core method ChangeSelf(). Here we use an array to do 2 changes in sequence. 1st we update the material and 2nd we add the component 'raycast-teleportation' which will teleport the user on click to the raycaster intersection point. Next we spawn an ObjRing object named basicRing that takes in a Core Data of a cube and randomizes it's scale and color generating a handful of them throughout the scene.

	start:{
		floor:{ChangeSelf:[{property: 'material', value: {src: auxl.pattern80, repeat: '150 150',color: "#21679a", emissive: "#21679a",},},{property: 'position', value: new THREE.Vector3(0,0,0),},{property: 'raycast-teleportation', value: null,}],},
		basicRing:{SpawnObjRing:null},
	},

And finally, we configure an Exit Instruction to remove the 'raycast-teleportation' component that was added on Scene load. If we do not do this, then the component will persist when moving through other Zone/Scenes which may be what you want, but this is a good example to showcase the Exit usage.

	exit:{
		floor:{RemoveComponent:'raycast-teleportation'},
	},

Final Notes :
---
And that's it! We have gone over the entire Starter Scenario through the main Scenario, Zone0, Zone1, Zone0Scene0, Zone0Scene1 and Zone1Scene0. If you haven't already, check out the other Wiki Sections to get a more in-depth knowledge about each AUXL object and how they are used as well as the Instructions for each Scenario, Zone, Scene and even NPC Books.

Enjoy!
---