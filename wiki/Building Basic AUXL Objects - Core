AUXL Engine v0.2 : Web XR Scenario, Object Generator Engine & Universal Controller System 
---
Wiki Sections

- [Home](https://github.com/Minty-Crisp/AUXL/wiki)

- [System Overview](https://github.com/Minty-Crisp/AUXL/wiki/System-Overview)

- Quick Start Guide

- [Customizing AUXL Controls](https://github.com/Minty-Crisp/AUXL/wiki/Customizing-AUXL-Controls)

Building AUXL Scenarios, Zones and Scenes
- [Instructions](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Instructions)
- [Scenario](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Scenario)
- [Zone](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Zone)
- [Scene](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Scene)

Building Basic AUXL Objects
- Core (Here)
- [Layer](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Layer)
- [ObjsGenRing](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ObjsGenRing)
- [MultiAssetGen](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-MultiAssetGen)
- [Horizon](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Horizon)
- [SkyBox](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-SkyBox)
- [Teleport](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Teleport)
- [ImageSwapper](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ImageSwapper)
- [ImageCarousel](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ImageCarousel)

Building Advanced AUXL Objects
- [NPC w/ Book](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-NPC-w--Book)
- [Menu](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-Menu)
- [MemoryGame](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-MemoryGame)

Using Special AUXL Objects
- [Player](https://github.com/Minty-Crisp/AUXL/wiki/Using-Special-AUXL-Objects-:-Player)
- [HamMenu](https://github.com/Minty-Crisp/AUXL/wiki/Using-Special-AUXL-Objects-:-HamMenu)

---
Building Basic AUXL Objects : Core
---
A single entity object built from a defined set of data such as its ID, Entity Type, Geometry or 3D Model, Material, Text, Position, Rotation, Scale, Animations, Mixins, Classes, Components & Required JS Scripts. Used to build other objects or adding to the scene environment via Scenario/Zone/Scene/Book instructions or manually.
---
Defining a Core Data & Core Object :
---
A Core is built of a set of object data defining the A-Frame HTML information needed to render the entity. Any key that is not needed can be removed or set to false to be ignored. That data is then imported into the Core object generator to build that object which is then ready for deployment.

	auxl.exampleData = {
		data:'exampleData',
		id:'exampleName',
		entity: false,
		sources: false,
		sound: false,
		text: false,
		geometry: false,
		material: false,
		position: false,
		rotation: false,
		scale: false,
		animations: false,
		mixins: false,
		classes: false,
		components: false,
	};
	auxl.exampleName = auxl.Core(auxl.exampleData);

Data and Objects need to be built inside a component that has the auxl reference. It is recommended to add user created objects within the auxl-scene-library component, otherwise ensure that you connect to the AUXL system with

	const auxl = document.querySelector('a-scene').systems.auxl;

To build something that will actual render an item, you specify the various keys required to render the item such as...

	auxl.exampleData = {
		data:'exampleData',
		id:'exampleName',
		entity: false,
		sources: false,
		sound: false,
		text: {value:'Text Value', width: 3, color: "#FFFFFF", align: "center", font: "exo2bold", zOffset: 0.55, side: 'double'},
		geometry: {primitive: 'box', depth: 1, width: 2, height: 3},
		material: {shader: "flat", color: 'black'},
		position: new THREE.Vector3(0,1,-2),
		rotation: new THREE.Vector3(0,90,0),
		scale: new THREE.Vector3(1,2,1),
		animations: {
			animation1:{property: 'object3D.position.y', from: '1', to: '2', dur: 5000, delay: 0, loop: 'true', dir: 'alternate', easing: 'linear', elasticity: 400, autoplay: true, enabled: true,},
		},
		mixins: false,
		classes: ['a-ent'],
		components: {
			['look-at']:'#camera',
		},
	};
	auxl.exampleName = auxl.Core(auxl.exampleData);

The example above will build the core object named 'exampleName' that will be cube in geometry with a flat black material, text in white saying 'Text Value', at position XYZ(0,1,-2), with a rotation of XYZ(0,90,0), a scale of XYZ(1,2,1), the animation moving it up and down along the Y axis, a basic class of 'a-ent' as well with the look-at component connecting it to the Player camera.

Most of the Core data keys are obvious for what they control, but a few require additional info to ensure they are used correctly.

The 'data' key holds the name of the data object itself. This allows various generators to reference the original data.

The 'id' key holds the name of the generated Core object and will be the HTML ID as well. This must match for the system to work correctly. You can use a single data set as a template as long as you change the auxl.exampleData.id before you create the Core object which again must match the new object name.

The 'source' is a legacy key item that allows you specify various javascript urls required for the entity components you have attached to it that are not declared within the HTML page. You would build a new object within that key that itself has the key name which matches the component required to load it and the value of the URL itself. Such as...

	auxl.exampleData = {
		data:'exampleData',
		id:'exampleName',
		sources: {
			['look-at']:'https://unpkg.com/aframe-look-at-component@1.0.0/dist/aframe-look-at-component.min.js',
		},
		components: {
			['look-at']:'#camera',
		},
	};

Ideally however, you would append that same component name key and url value into the auxl.jsAll object. So that instead of repeating that sources info on all objects that use same the look-at component, any object that requires it and it has yet to be loaded will reference the auxl.jsAll for the url to load it from.

	auxl.jsAll = {
		['look-at']:'https://unpkg.com/aframe-look-at-component@1.0.0/dist/aframe-look-at-component.min.js',
	};

The 'entity' key allows you to specify other a-frame entities instead of the default a-entity as there are some really special entity objects such as a-sky. If you omit or specify as false, then it used that default a-entity. You could even define it as a-box and use the components section to specify the geometry as these special entity's read their values differently. Additionally, the 'entity' key allows you to define it as 'preAdded' if the A-Frame a-scene HTML has the item already written. You gain full control over it allowing you to change or remove it as well.

The 'sound' key allows you add a sound to the object. Only 1 sound per object currently supported. These are enabled with the user interaction from the menu to toggle audio.

	auxl.exampleData = {
		data:'exampleData',
		id:'exampleName',
		sound: {src: './assets/audio/270341__littlerobotsoundfactory__pickup-04.wav', autoplay: false, loop: false, volume: 1, on: 'playSound'},
	};

The 'geometry' key of course allows you to specify the entity primitive shape for which the material would be applied to. If you want to use a 3D model such as GLTF or OBJ, then you may omit the geometry information and within the 'components' key add it there. Such as...

	auxl.exampleData = {
		data:'exampleData',
		id:'exampleName',
		components:{
			['gltf-model']:'./assets/3d/location/name.glb',
		},
	};

Additional note, if you use an OBJ model and omit the that file's .mat asset, then you may utilize the 'material' key in it's place.

The 'animations' is generally obvious, but an important detail is that while you can add as many uniquely named animations as you want, the names must be lowercase. So no uppercase or CamelCase, lowercase names only!

The 'mixins' key uses A-Frame's predefined a-assets list of a-mixins. There is no way currently to dynamically add/remove a-mixins unfortunately.

The 'classes' key allows you to specify the HTML class of the object such as 'clickable' which allows the user to select the object with their raycaster. No other classes are required for the system to be used, but will always be handy for customizations and future additions.

And finally the 'components' key which takes in an object of unique component names for keys along with the values needed to start said components. If the component does not need a value, then 'null' is required for its value. If the component has named schema imports, then that value will be another object comprised of each schema name key and their value.

	auxl.exampleData = {
		data:'exampleData',
		id:'exampleName',
		components:{
			['test-component']:{schema1: 'test', schema2: 'test',},
		},
	};

One more note, asset sources like for 3D models, textures, sounds, etc... can be defined as the a-asset #id, local site location or world site location as long as it passes CORS.

Each paramter description :

- data: Name of Data object for reference.

- id: Name must match named Core object generated.

- entity: The type of entity to be used, defaults to a-entity. Use 'preAdded' if the element exists in the a-scene HTML.

- sources: Object with key names for associated components and the value of the url where the .js is stored.

- sound: Sound object paramters to be added and used if audio is enabled.

- text: Display text. Can be used with geometry, be sure to utilize text offsets to ensure it can be viewed based on the shape.

- geometry: The primitive shape of the object.

- material: The material, shader, image to be applied.

- position: Requires 'new THREE.Vector3()'

- rotation: Requires 'new THREE.Vector3()'

- scale: Requires 'new THREE.Vector3()'

- animations: An object list of animations. Object names must be lowercase.

- mixins: An array of a-mixins predefined within a-scene's a-assets.

- classes: An array of HTML classes. 'clickable' is required for raycaster intersection/selection.

- components: An object list of attached components and paramters. Can also define any other DOM attribute or A-Frame such as gltf-model.

---
Core Methods :
---
Object methods fall into 1 of 3 categories. Public, Support and Private methods.
1. Public methods are those that you would use within a set of Scenario/Zone/Scene/Book instructions
2. Support methods are those that aid in the use of Public and Private methods. Used outside of instructions.
3. Private methods that stay within the Object. These methods will be ignored for now.

Core Public methods are SpawnCore(), DespawnCore(), ChangeSelf(), RemoveComponent(), Animate(), EmitEvent(), SetFlag(), GetFlag(), EnableDetail() & DisableDetail().

Core Support methods are GetEl().

Normally you will be running the object methods within a Scenario/Zone/Scene/Book instruction set, but can be done outside of that and within a component that has a reference to the AUXL system such as...

	const auxl = document.querySelector('a-scene').systems.auxl;
	auxl.exampleName.MethodName(params);

Otherwise all object methods will be ran inside an instruction set within the JSON layout like this incomplete Scene data which is running the object coreName and method MethodName at the start of the scene with empty parameters. 

An important detail to emphasis is that all instructions require null to be used if no paramters are needed.

	auxl.exampeNode = {
		start:{
			exampleName:{MethodName:null},
		},
	};

More information on using instructions can be found within Building AUXL Scenarios, Zones and Scenes pages, but just a note here is that you can also chain various methods together to run.

	auxl.exampeNode = {
		start:{
			exampleName:{MethodName1:null, MethodName2:null,},
		},
	};

The remaining examples will be in the above format omitting the node and start parent objects.

SpawnCore
---
- Spawns the Core entity element into the environment. When spawning via a Scenario, Zone, Scene or Book it is added to that respective instruction tracker.

It accepts a single parameter.

SpawnCore(parent)

'parent' is the in-scene entity to which the entity will be attached to. Omit to attach directly to a-scene. parent is mainly used with the Layer object.

	exampleName:{SpawnCore:null},
- - -

DespawnCore
---
- Despawns the Core entity element from the environment. When removing via a Scenario, Zone, Scene or Book it is also removed from that respective instruction tracker.

It accepts two parameters.

SpawnCore(parent,layer)

'parent' is the in-scene entity to which the entity is removed from.
'layer' is true/false if the Core is being used within the Layer object.

	exampleName:{DespawnCore:null},
- - -

ChangeSelf
---
- Change a Core spawned in the scene. Adjust current information or add new information such as position, material, components, etc...

It accepts a single or array of property/value objects.

ChangeSelf(propertyValue)

'propertyValue' is an object or array of objects that define the name of the property being updated as well as the value such as {property:'name', value: 'value'} or [{property:'name', value: 'value'},{property:'name', value: 'value'}] .

	exampleName:{ChangeSelf:{property:'material', value:{color: 'green', emissive: 'green',}}},
- - -

RemoveComponent
---
- Remove a component or even a property from a Core spawn in the Scene.

It accepts a string or an array of string component/property names.

RemoveComponent(property)

'property' is a string or array of string names.

	exampleName:{RemoveComponent:'test-component'},
- - -

Animate
---
- Add a-frame animation to Core spawned in the scene. If the animation is configured for autoplay will start as soon as the method is ran otherwise will run on delay or event emitted as imported.

It accepts a single or an array of animation objects.

Animate(animProps)

'animProps' is an object or array of objects that define the animation being added along with the name and all required parameters.

	exampleName:{Animate:{name: 'testanimation', property: 'propertyName', from: 0, to: 1, dur: 1000, delay: 0, loop: true, dir: 'normal', easing: 'linear', autoplay: true, enabled: true,}},
- - -

EmitEvent
---
- Emit an event from a Core spawned in the scene.

It accepts a string or an array of strings as event names.

EmitEvent(eventName)

'eventName' is a string or array of strings.

	exampleName:{EmitEvent:'eventName'},
- - -

SetFlag
---
- Add or change a variable with value attached to a Core. Flag and value persist throughout the page session. Used mainly with instruction conditionals.

It accepts a single or an array of objects.

SetFlag(flagValue)

'flagValue' is an object that defines the flag name and flag value such as {flag:'flagName', value:'flagValue'}

	exampleName:{SetFlag:{flag:'name', value:true}},
- - -

GetFlag
---
- Retrieve a flag value attached to a Core. Used mainly with instruction conditionals.

It accepts a string or an array of strings to check for. If a flag does not exist then false will be returned.

GetFlag(flag)

'flag' is a string or array of strings and returns a value or array of values respectively.

	exampleName:{GetFlag:'flagName'},
- - -

EnableDetail
---
- Enable a special detailed window that toggles view on raycaster click to provide text information for the Core. Requires the clickable class on entity to function.

It accepts an object that contains at minimum the key 'text' along with the value of the text in addition to the position, textColor, windowColor, windowWidth & windowHeight if needed. If vec3 position is ommitted, then it is placed above current position.

EnableDetail(detailInfo)

'detailInfo' is an object with keys such as text, position, textColor, windowColor, windowWidth & windowHeight.

	exampleName:{EnableDetail:{text: 'Example Text', textColor: 'black', windowColor: 'white', windowWidth: 2, windowHeight: 2}},
- - -

DisableDetail
---
- Disables the Core click event for the special detailed window created by EnableDetail(detailInfo).

It does not accept any parameters.

DisableDetail()

	exampleName:{DisableDetail:null},
- - -

GetEl
---
- Retrieve the Core entity element spawned in the scene. Used as a support method in various other functions, but can also be used as an input for Public methods.

It does not accept any parameters, but returns the in-scene DOM element for various uses.

GetEl()

	auxl.exampleName.GetEl()
- - -