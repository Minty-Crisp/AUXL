AUXL Engine v0.2 : Web XR Scenario, Object Generator Engine & Universal Controller System 
---
Wiki Sections

- [Home](https://github.com/Minty-Crisp/AUXL/wiki)

- [System Overview](https://github.com/Minty-Crisp/AUXL/wiki/System-Overview)

- [Getting Started with AUXL](https://github.com/Minty-Crisp/AUXL/wiki/Getting-Started-with-AUXL)

- [Customizing AUXL Controls](https://github.com/Minty-Crisp/AUXL/wiki/Customizing-AUXL-Controls)

Building AUXL Scenarios, Zones and Scenes
- [Instructions](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Instructions)
- [Scenario](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Scenario)
- [Zone](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Zone)
- [Scene](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Scene)

Building Basic AUXL Objects
- [Core](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Core)
- Layer (Here)
- [ObjsGenRing](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ObjsGenRing)
- [MultiAssetGen](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-MultiAssetGen)
- [Horizon](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Horizon)
- [SkyBox](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-SkyBox)
- [Teleport](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Teleport)
- [ImageSwapper](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ImageSwapper)
- [ImageCarousel](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ImageCarousel)

Building Advanced AUXL Objects
- [NPC w/ Book](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-NPC-w--Book)
- [Menu](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-Menu)
- [MemoryGame](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-MemoryGame)

Using Special AUXL Objects
- [Player](https://github.com/Minty-Crisp/AUXL/wiki/Using-Special-AUXL-Objects-:-Player)
- [HamMenu](https://github.com/Minty-Crisp/AUXL/wiki/Using-Special-AUXL-Objects-:-HamMenu)

Demo & Examples
- [Demo](https://minty-crisp.github.io/AUXL/)
- [Starter](https://minty-crisp.github.io/AUXL/starter.html)

---
Building Basic AUXL Objects : Layer
---
A multi entity object built from a defined set of Cores structured as a main Parent with children, grandchildren and great grandchildren. Acts just like a Core except you can manipulate the Parent, a child or every item in the Layer. Used to build other objects or adding to the scene environment via Scenario/Zone/Scene/Book instructions or manually.
---
Defining a Layer Data & Layer Object :
---
A Layer is built up of various Cores that have already been defined and generated, but within a structure that lays out the order for which they will be combined. They can be simple such as a single parent and child...

	auxl.exampleLayerData = {
		parent: {core: auxl.example0},
		child0: {core: auxl.example1},
	}
	auxl.exampleLayer = auxl.Layer('exampleLayer', auxl.exampleLayerData);

Or more complex such as a Parent with multiple children, grand children and great grandchildren.

	auxl.exampleLayerData = {
		parent: {core: auxl.example0},
		child0: {
			parent: {core: auxl.example1},
			child0: {
				parent: {core: auxl.example4},
				child0: {core: auxl.example5},
			},
		},
		child1: {core: auxl.example6},
	}
	auxl.exampleLayer = auxl.Layer('exampleLayer', auxl.exampleLayerData);

The Layer generator takes in 2 parameters, an ID and the object that contains the structure. As usual, the ID must match the Layer object.

---
Layer Methods :
---

Object methods fall into 1 of 3 categories. Public, Support and Private methods.
1. Public methods are those that you would use within a set of Scenario/Zone/Scene/Book instructions
2. Support methods are those that aid in the use of Public and Private methods. Used outside of instructions.
3. Private methods that stay within the Object. These methods will be ignored for now.

Layer Methods match Core methods with 3 variations for each such as being applied to the Layer parent, a specific child or to every object in the Layer.

Layer Public methods are SpawnLayer(), DespawnLayer(), EmitEventParent(), EmitEventChild(), EmitEventAll(), ChangeParent(), ChangeChild(), ChangeAll(), RemoveComponentParent(), RemoveComponentChild(), RemoveComponentAll(), AnimateParent(), AnimateChild(), AnimateAll(), SetFlagParent(), SetFlagChild(), SetFlagAll(), GetFlagParent(), GetFlagChild(), GetFlagAll(), EnableDetailParent(), EnableDetailChild(), EnableDetailAll(), DisableDetailParent(), DisableDetailChild() & DisableDetailAll().

Layer Support methods are GetParentEl() & GetChild().

SpawnLayer
---
- Spawns the Layer entity element into the environment. When spawning via a Scenario, Zone, Scene or Book it is added to that respective instruction tracker.

It does not accept any parameters.

SpawnLayer()

	exampleLayer:{SpawnLayer:null},
- - -

DespawnLayer
---
- Despawns the Layer entity element from the environment. When removing via a Scenario, Zone, Scene or Book it is also removed from that respective instruction tracker.

It accepts a single parameters.

DespawnLayer(other)

'other' is true/false if the Layer was spawned from another AUXL object.

	exampleLayer:{DespawnLayer:null},
- - -

EmitEventParent, EmitEventChild & EmitEventAll
---
- Emit an event from a Core within Layer spawned in the scene whether it is the parent, a single child or every object.

They accept a string or an array of strings as event names. The Child version accepts an object that names the child and then accepts a string or an array of strings as event names.

EmitEventParent(eventName)
EmitEventChild(child, eventName)
EmitEventAll(eventName)

'eventName' is a string or array of strings.
'child' is the name of the auxl object within the Layer

	exampleLayer:{EmitEventParent:'eventName'},
	exampleLayer:{EmitEventChild:{child: 'example1', eventName: 'eventName'}},
	exampleLayer:{EmitEventAll:'eventName'},
- - -

ChangeParent, ChangeChild & ChangeAll
---
- Change a Layer spawned in the scene whether it is the parent, a single child or every object. Adjust current information or add new information such as position, material, components, etc...

They accept a single or array of property/value objects. The Child version accepts an object that names the child and then accepts a single or array of property/value objects.

ChangeParent(propertyValue)
ChangeChild(child, propertyValue)
ChangeAll(propertyValue)

'propertyValue' is a single or array of {property:'name', value: 'value'} objects
'child' is the name of the auxl object within the Layer

	exampleLayer:{ChangeParent:{property:'material', value:{color: 'green', emissive: 'green',}}},
	exampleLayer:{ChangeChild:{child: 'example1', propertyValue: {property:'material', value:{color: 'green', emissive: 'green',}}}},
	exampleLayer:{ChangeAll:{property:'material', value:{color: 'green', emissive: 'green',}}},
- - -

RemoveComponentParent, RemoveComponentChild & RemoveComponentAll
---
- Remove a component or even a property from a Layer spawned in the Scene whether it is the parent, a single child or every object.

They accept a string or an array of strings as component/property names. The Child version accepts an object that names the child and then accepts a string or an array of strings as component/property names.

RemoveComponentParent(property)
RemoveComponentChild(child, property)
RemoveComponentAll(property)

'property' is a string or array of strings.
'child' is the name of the auxl object within the Layer

	exampleLayer:{RemoveComponentParent:'test-component'},
	exampleLayer:{RemoveComponentChild:{child: 'example1', property: 'test-component'}},
	exampleLayer:{RemoveComponentAll:'test-component'},
- - -

AnimateParent, AnimateChild & AnimateAll
---
- Add a-frame animation to Layer spawned in the scene whether it is the parent, a single child or every object. If the animation is configured for autoplay will start as soon as the method is ran otherwise will run on delay or event emitted as imported.

They accept a single or array of animProps objects. The Child version accepts an object that names the child and then accepts a single or array of animProps objects.

AnimateParent(animProps)
AnimateChild(child, animProps)
AnimateAll(animProps)

'animProps' is a single or array of animProps objects
'child' is the name of the auxl object within the Layer

	exampleLayer:{AnimateParent:{name: 'testanimation', property: 'propertyName', from: 0, to: 1, dur: 1000, delay: 0, loop: true, dir: 'normal', easing: 'linear', autoplay: true, enabled: true,}},
	exampleLayer:{AnimateChild:{child: 'example1', property: {name: 'testanimation', property: 'propertyName', from: 0, to: 1, dur: 1000, delay: 0, loop: true, dir: 'normal', easing: 'linear', autoplay: true, enabled: true,}}},
	exampleLayer:{AnimateAll:{name: 'testanimation', property: 'propertyName', from: 0, to: 1, dur: 1000, delay: 0, loop: true, dir: 'normal', easing: 'linear', autoplay: true, enabled: true,}},
- - -

SetFlagParent, SetFlagChild & SetFlagAll
---
- Add or change a variable with value attached to a Layer whether it is the parent, a single child or every object. Flag and value persist throughout the page session. Used mainly with instruction conditionals.

They accept a single or array of flagValue objects.
The Child version accepts an object that names the child and then accepts a single or array of flagValue objects.

SetFlagParent(flagValue)
SetFlagChild(child, flagValue)
SetFlagAll(flagValue)

'flagValue' is a single or array of flagValue objects
'child' is the name of the auxl object within the Layer

	exampleLayer:{SetFlagParent:{flag:'name', value:true}},
	exampleLayer:{SetFlagChild:{child: 'example1', flagValue:{flag:'name', value:true}}},
	exampleLayer:{SetFlagAll:{flag:'name', value:true}},
- - -

GetFlagParent, GetFlagChild & GetFlagAll
---
- Retrieve a flag value attached to a Layer whether it is the parent, a single child or every object. Used mainly with instruction conditionals.

They accept a string or array of flag strings. The Child version accepts an object that names the child and then accepts a string or array of flag strings.

GetFlagParent(flag)
GetFlagChild(child, flag)
GetFlagAll(flag)

'flag' is a single or array of flag objects
'child' is the name of the auxl object within the Layer

	exampleLayer:{GetFlagParent:'flagName'},
	exampleLayer:{GetFlagChild:{child: 'example1', flag:'flagName'}},
	exampleLayer:{GetFlagAll:'flagName'},
- - -

EnableDetailParent, EnableDetailChild & EnableDetailAll
---
- Enable a special detailed window that toggles view on raycaster click to provide text information for the Layer whether it is the parent, a single child or every object. Requires the clickable class on each entity to function.

They accept a single or array of detailInfo objects that contains at minimum the key 'text' along with the value of the text in addition to the position, textColor, windowColor, windowWidth & windowHeight if needed. If vec3 position is ommitted, then it is placed above current position. The Child version accepts an object that names the child and then accepts a single or array of detailInfo objects.

EnableDetailParent(detailInfo)
EnableDetailChild(child, detailInfo)
EnableDetailAll(detailInfo)

'detailInfo' is a single or array of detailInfo objects
'child' is the name of the auxl object within the Layer

	exampleLayer:{EnableDetailParent:{text: 'Example Text', textColor: 'black', windowColor: 'white', windowWidth: 2, windowHeight: 2}},
	exampleLayer:{EnableDetailChild:{child: 'example1', detailInfo:{text: 'Example Text', textColor: 'black', windowColor: 'white', windowWidth: 2, windowHeight: 2}}},
	exampleLayer:{EnableDetailAll:{text: 'Example Text', textColor: 'black', windowColor: 'white', windowWidth: 2, windowHeight: 2}},
- - -

DisableDetailParent, DisableDetailChild & DisableDetailAll
---
- Disables the Layer click event for the special detailed window created by EnableDetailParent, EnableDetailChild and/or EnableDetailAll

It does not accept any parameters.

EnableDetailParent()
EnableDetailChild()
EnableDetailAll()

	exampleLayer:{DisableDetailParent:null},
	exampleLayer:{DisableDetailChild:'example1'},
	exampleLayer:{DisableDetailAll:null},
- - -

GetParentEl
---
- Retrieve the main Layer parent entity element spawned in the scene. Used as a support method in various other functions, but can also be used as an input for Public methods.

It does not accept any parameters, but returns the in-scene DOM element for various uses.

GetParentEl()

	auxl.exampleLayer.GetParentEl()
- - -

GetChild
---
- Retrieve a child Core from a Layer. You can then run any Core methods on the returned object such as GetEl(). Used as a support method in various other functions, but can also be used as an input for Public methods.

It accepts a single parameter, a string which is the name of the child.

GetChild(child)

'child' is the name of the auxl object within the Layer

	auxl.exampleLayer.GetChild('example1')
- - -