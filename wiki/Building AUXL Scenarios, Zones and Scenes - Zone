AUXL Engine v0.2 : Web XR Scenario, Object Generator Engine & Universal Controller System 
---
Wiki Sections

- [Home](https://github.com/Minty-Crisp/AUXL/wiki)

- [System Overview](https://github.com/Minty-Crisp/AUXL/wiki/System-Overview)

- Quick Start Guide

- [Customizing AUXL Controls](https://github.com/Minty-Crisp/AUXL/wiki/Customizing-AUXL-Controls)

Building AUXL Scenarios, Zones and Scenes
- [Instructions](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Instructions)
- [Scenario](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Scenario)
- Zone (Here)
- [Scene](https://github.com/Minty-Crisp/AUXL/wiki/Building-AUXL-Scenarios,-Zones-and-Scenes-:-Scene)

Building Basic AUXL Objects
- [Core](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Core)
- [Layer](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Layer)
- [ObjsGenRing](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ObjsGenRing)
- [MultiAssetGen](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-MultiAssetGen)
- [Horizon](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Horizon)
- [SkyBox](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-SkyBox)
- [Teleport](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-Teleport)
- [ImageSwapper](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ImageSwapper)
- [ImageCarousel](https://github.com/Minty-Crisp/AUXL/wiki/Building-Basic-AUXL-Objects-:-ImageCarousel)

Building Advanced AUXL Objects
- [NPC w/ Book](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-NPC-w--Book)
- [Menu](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-Menu)
- [MemoryGame](https://github.com/Minty-Crisp/AUXL/wiki/Building-Advanced-AUXL-Objects-:-MemoryGame)

Using Special AUXL Objects
- [Player](https://github.com/Minty-Crisp/AUXL/wiki/Using-Special-AUXL-Objects-:-Player)
- [HamMenu](https://github.com/Minty-Crisp/AUXL/wiki/Using-Special-AUXL-Objects-:-HamMenu)

---
Building AUXL Scenarios, Zones and Scenes : Zone
---
Zones define a shared set of Instructions for all Scenes within it's scope. They are also the map for which connects each Scene as well as connecting to other Zones. They can provide 1 way or 2 way travel between scenes as well as allow travel based on 1 time use only or unlimited use Keys.
---
Defining a Zone Data & Zone Object :
---
Zone's encapsulate a set of scenes and control how the player navigates through each scene. They control each Scene's mapped connection to all other Scene's within the Zone and in other Zones. You can configure various map setups to act as a normal Hallway, 1 way Gates, single use Key to unlock Doors or always locked Doors. You must have at least 1 scene defined for the Zone to function and set a default starting area which is only really required if that Zone itself is the Scenario default. Otherwise you can navigate to any Scene within the Zone via another Scene's Zone map.

Basic Zone info required :

	auxl.zone0Data = {
		info:{
			id: 'zone0',
			name: 'Zone0',
			zoneNum: 0,
			start: 'zone0Scene0',
		},
		zone0Scene0:{},
		controls:{},
		start:{},
		delay:{},
		interval:{},
		event:{},
		interaction:{},
		exit:{},
	auxl.zone0 = auxl.MapZone(auxl.zone0Data);

The zone0Scene0 Scene is the default scene loaded as stated in the info, so if you navigate into this zone without a Scene selected, this one will load. This happens if the Zone is the default in a Scenario or on manual movement.

Info key descriptions :

- id: Name must match named Zone object generated.

- name: Title of the Zone. Will be used for in-scene map.

- zoneNum: Not yet utilized

- start: The starting Scene to spawn on Zone loading with no Scene defined.

---
Zone Maps :
---
Inside a Zone object where you can also control the lexical scope of all Scenes, you will define a map object for every Scene within that Zone such as...

	auxl.zone0Data = {
		info:{
			id: 'zone0',
			name: 'Zone0',
			zoneNum: 0,
			start: 'zone0Scene0',
		},
		zone0Scene0:{
			connect0: {inZone: true, node: 'zone0Scene1',},
			connect1: {inZone: true, node: 'zone0Scene2',},
		},
		zone0Scene1:{
			connect0: {inZone: true, node: 'zone0Scene0',},
			connect1: {inZone: true, node: 'zone0Scene2',},
			connect2: {inZone: 'zone1', node: 'zone1Node0', locked: true, key: 'zone1Key', keepKey: true},
		},
		zone0Scene2:{
			connect0: {inZone: true, node: 'zone0Scene0',},

		},
		controls:{},
		start:{},
		delay:{},
		interval:{},
		event:{},
		interaction:{},
		exit:{},
	};
	auxl.zone0 = auxl.MapZone(auxl.zone0Data);

The above map example creates a Zone with 3 total Scenes within it each with their own map. Each of the Scene object names are zone0Scene0, zone0Scene1 & zone0Scene2. Lets go through each Scene's map to explain what is going on here.

zone0Scene0 :

This Scene has 2 connections. It connects to 2 other inZone Scenes named zone0Scene1 and zone0Scene2. You can freely travel to these Scenes without restriction while within this Scene.

zone0Scene1 :

This Scene has 3 connections. It connects to the 2 other InZone Scenes similar to our first scene without restrictions, but you can also move into a another Zone & Scene from here. Although that specific connection is currently under Lock & Key, so unless the 'player' object has received the flag key named 'zone1Key' with value true then this travel is forbidden. This option still displays and has the added text [Locked]. If the player clicks this option, a Notification will display indicating the name of the Key required. Once the 'player' object receives that flag Key, then they can freely move from that Scene and the option will display [Unlocked].

zone0Scene2 :

While this Scene can be entered via 2 other inZone Scenes, it can only exit to 1 other Scene, zone0Scene0. This gives you an idea of the 1 way travel you can configure. As if zone0Scene0 and zone0Scene2 exist on the same ground level, but zone0Scene1 exists above the 2. You could imagine a set of stairs leading from zone0Scene0 to zone0Scene1 that moves the player to a 2nd floor and they can jump down into zone0Scene2 or go back down the stairs into zone0Scene0.

Map Objects :

For every Scene you generate a map for, you also generate each map connection starting with 'connect0', 'connect1', etc... This not only keeps the keys unique to avoid issues, but serves as the list order that is prompted to the player with the in-scene map menu.

Connect key descriptions:

- inZone: true if the scene is within the same Zone or the name of Zone for which the scene exists.

- node: The name of the Scene for which it connects to. Scenes are also known as SceneNode's since you can think of the map as a set of nodes connected to various other nodes each with their own set of conditions.

- locked: true/false if the connection requires a key. If false, key and keepKey are ignored.

- key: The flag name for the Key itself which will be checked on the 'player' object.

- keepKey: true/false if the 'player' will keep the key on use. If false, then as soon as it is used, that flag will be set to false and the 'player' must get another matching key to re-open the connection once more.

Additional Note, you must generate each Scene used within the Zone before generating the Zone itself as the Zone map connects with each Scene object.

---
Instruction Scope :
---
As with the other Instruction objects, anything you define here will persist while in this scope only. So all controls, start, delay, interval, event & interactions object/method/params defined here will persist through all Scenes within this Zone. When you move to another Zone, those will all be removed and cleared as well as the exit section will run.

---
Zone Methods :
---

StartScene
---
- Spawns the Zone's Scene into the environment and the Zone if it has not already been loaded. While you can run this manually, if so it will not load the Scenario it belongs to. So it is best to run the Scenario method instead.

It accepts a single parameter.

StartScene(nodeName)

'nodeName' is the name of the Scene to load. If blank, will load the default Scene defined in the Zone.

	auxl.zone0.StartScene()

- - -

ClearZone
---
- Despawns the Zone from the environment along with the Scene currently loaded.

It does not accept any parameters.

ClearZone()

	auxl.zone0.ClearZone()

- - -

Move
---
- Move from the current Scene/Zone into the provided Scene/Zone. Used within the Map menu, but can be triggered manually.

It accepts a single parameter.

Move(connect)

'connect' is the name of the Scene to load and is required.

	auxl.zone0.Move('zone1Scene0')

- - -

MoveSpawnMenu
---
- Move Menu currently spawns automatically on Scene load, but if disabled can be still be triggered.

It does not accept any parameters.

MoveSpawnMenu()

	auxl.zone0.MoveSpawnMenu()

- - -

MenuMoveClick
---
- Map Menu support function which attaches a click component with this function to allow you to select an option and use that option's result attribute to run Move(connect).

It accepts a single parameter.

MenuMoveClick(el)

'el' is an entity which is used to read from the attribute result to provide Move(connect) with an input

	auxl.zone0.MenuMoveClick(element)

- - -